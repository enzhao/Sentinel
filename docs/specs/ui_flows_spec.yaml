flowId: FLOW_CREATE_PORTFOLIO_MANUAL
requiresAuth: true
initialState: DashboardView
states:
  - name: DashboardView
    renders: VIEW_DASHBOARD
    description: "The user is on the main dashboard, viewing their list of portfolios."
    events:
      USER_CLICKS_ADD_PORTFOLIO: CreatePortfolioView

  - name: CreatePortfolioView
    renders: VIEW_PORTFOLIO_FORM
    description: "The user is on the 'Create a Portfolio' view."
    initialState: EditingPortfolio
    states:
      - name: EditingPortfolio
        description: "The user is filling out the form for the new portfolio."
        events:
          USER_CLICKS_ADD_HOLDING: AddingHolding
          USER_CLICKS_SAVE: ValidateForm
          USER_CLICKS_CANCEL: DashboardView

      - name: AddingHolding
        description: "The user has clicked 'Add Holding' and is now in the holding creation subflow."
        subflow:
          flowId: FLOW_ADD_HOLDING_MANUAL
          onCompletion: EditingPortfolio
          onCancel: EditingPortfolio

  - name: ValidateForm
    renders: VIEW_PORTFOLIO_FORM
    description: "The system is performing client-side validation on the form inputs."
    entryAction:
      service: "ValidationService.validate(form)"
      transitions:
        valid: Submitting
        invalid: FormError

  - name: Submitting
    renders: VIEW_PORTFOLIO_FORM
    description: "The system is submitting the new portfolio data to the backend."
    entryAction:
      service: "POST /api/users/me/portfolios"
      transitions:
        success: Success
        failure: APIError

  - name: Success
    description: "The portfolio was created successfully. The user is returned to the dashboard."
    exitAction:
      action: NAVIGATE_TO
      target: VIEW_DASHBOARD

  - name: FormError
    renders: VIEW_PORTFOLIO_FORM
    description: "The user is shown an error message indicating which form fields are invalid."
    events:
      USER_DISMISSES_ERROR: CreatePortfolioView

  - name: APIError
    renders: VIEW_PORTFOLIO_FORM
    description: "The user is shown a generic error message that the portfolio could not be saved."
    events:
      USER_DISMISSES_ERROR: CreatePortfolioView
---
flowId: FLOW_VIEW_PORTFOLIOS_LIST
requiresAuth: true
initialState: ReadOnlyMode
states:
  - name: ReadOnlyMode
    renders: VIEW_DASHBOARD
    description: "The user is viewing a read-only list of their portfolios."
    events:
      USER_CLICKS_MANAGE: ManageMode
      USER_CLICKS_PORTFOLIO_ITEM: PortfolioDetailView

  - name: ManageMode
    renders: VIEW_DASHBOARD
    description: "The user has entered manage mode for the portfolio list."
    events:
      USER_CLICKS_DONE: ReadOnlyMode
      USER_CLICKS_PORTFOLIO_ITEM: PortfolioDetailView
      USER_CLICKS_ADD_PORTFOLIO: AddingPortfolio
      USER_CLICKS_EDIT_ITEM: EditingPortfolio
      USER_CLICKS_DELETE_ITEM: DeletingPortfolio

  - name: PortfolioDetailView
    description: "Navigating to the portfolio's detailed view."
    exitAction:
      action: NAVIGATE_TO
      target: VIEW_PORTFOLIO_DETAIL

  - name: AddingPortfolio
    renders: VIEW_DASHBOARD
    description: "Invoking the portfolio creation subflow."
    subflow:
      flowId: FLOW_CREATE_PORTFOLIO_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: EditingPortfolio
    renders: VIEW_DASHBOARD
    description: "Invoking the portfolio update subflow."
    subflow:
      flowId: FLOW_UPDATE_PORTFOLIO_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: DeletingPortfolio
    renders: VIEW_DASHBOARD
    description: "Invoking the portfolio deletion subflow."
    subflow:
      flowId: FLOW_DELETE_PORTFOLIO_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode
---
flowId: FLOW_VIEW_PORTFOLIO_DETAIL
requiresAuth: true
initialState: ReadOnly
states:
  - name: ReadOnly
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The user is viewing the portfolio's details in a read-only state."
    activates:
      - flowId: "FLOW_VIEW_HOLDINGS_LIST"
        targetState: "ReadOnlyMode"
    events:
      USER_CLICKS_MANAGE_PORTFOLIO: ManageMode
      USER_CLICKS_DELETE: DeletingPortfolio
      USER_CLICKS_SET_AS_DEFAULT: SettingAsDefault

  - name: ManageMode
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The user has entered manage mode. The portfolio's fields are editable."
    activates:
      - flowId: "FLOW_VIEW_HOLDINGS_LIST"
        targetState: "ManageMode"
    events:
      USER_CLICKS_SAVE: ValidateForm
      USER_CLICKS_CANCEL: ReadOnly

  - name: ValidateForm
    renders: VIEW_PORTFOLIO_DETAIL
    description: "Performing client-side validation on the updated form inputs."
    entryAction:
      service: "ValidationService.validate(form)"
      transitions:
        valid: Submitting
        invalid: FormError

  - name: Submitting
    renders: VIEW_PORTFOLIO_DETAIL
    description: "Submitting the updated portfolio data to the backend."
    entryAction:
      service: "PUT /api/users/me/portfolios/{portfolioId}"
      transitions:
        success: ReadOnly
        failure: APIError

  - name: FormError
    renders: VIEW_PORTFOLIO_DETAIL
    description: "An error message is shown indicating which form fields are invalid."
    events:
      USER_DISMISSES_ERROR: ManageMode

  - name: APIError
    renders: VIEW_PORTFOLIO_DETAIL
    description: "A generic error message is shown that the portfolio could not be updated."
    events:
      USER_DISMISSES_ERROR: ManageMode

  - name: DeletingPortfolio
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The user is invoking the portfolio deletion subflow."
    subflow:
      flowId: FLOW_DELETE_PORTFOLIO_MANUAL
      onCompletion: (exit flow)
      onCancel: ReadOnly

  - name: SettingAsDefault
    renders: VIEW_PORTFOLIO_DETAIL
    description: "Submitting a request to set this portfolio as the user's default."
    entryAction:
      service: "PUT /api/users/me/settings (setting new defaultPortfolioId)"
      transitions:
        success: ReadOnly
        failure: ReadOnly
---
flowId: FLOW_UPDATE_PORTFOLIO_MANUAL
requiresAuth: true
initialState: ReadOnly
states:
  - name: ReadOnly
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The user is viewing the portfolio's details and its list of holdings."
    events:
      USER_CLICKS_MANAGE_PORTFOLIO: ManageMode

  - name: ManageMode
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The user has entered manage mode. The portfolio's fields are editable."
    activates:
      - flowId: "FLOW_VIEW_HOLDINGS_LIST"
        targetState: "ManageMode"
    events:
      USER_CLICKS_SAVE: ValidateForm
      USER_CLICKS_CANCEL: ReadOnly

  - name: ValidateForm
    renders: VIEW_PORTFOLIO_DETAIL
    description: "Performing client-side validation on the updated form inputs."
    entryAction:
      service: "ValidationService.validate(form)"
      transitions:
        valid: Submitting
        invalid: FormError

  - name: Submitting
    renders: VIEW_PORTFOLIO_DETAIL
    description: "Submitting the updated portfolio data to the backend."
    entryAction:
      service: "PUT /api/users/me/portfolios/{portfolioId}"
      transitions:
        success: ReadOnly
        failure: APIError

  - name: FormError
    renders: VIEW_PORTFOLIO_DETAIL
    description: "An error message is shown indicating which form fields are invalid."
    events:
      USER_DISMISSES_ERROR: ManageMode

  - name: APIError
    renders: VIEW_PORTFOLIO_DETAIL
    description: "A generic error message is shown that the portfolio could not be updated."
    events:
      USER_DISMISSES_ERROR: ManageMode
---
flowId: FLOW_DELETE_PORTFOLIO_MANUAL
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    description: "The flow is dormant, waiting to be triggered."
    events:
      USER_CLICKS_DELETE_PORTFOLIO: ConfirmingDelete

  - name: ConfirmingDelete
    renders: VIEW_CONFIRM_DELETE_PORTFOLIO_MODAL
    description: "A confirmation dialog appears for the deletion."
    events:
      USER_CLICKS_CONFIRM_DELETE: Submitting
      USER_CLICKS_CANCEL_DELETE: Idle

  - name: Submitting
    renders: VIEW_CONFIRM_DELETE_PORTFOLIO_MODAL
    description: "Submitting the delete request to the backend."
    entryAction:
      service: "DELETE /api/users/me/portfolios/{portfolioId}"
      transitions:
        success_refresh: SuccessRefresh
        success_prompt_new_default: SelectingNewDefault
        failure: APIError

  - name: SelectingNewDefault
    renders: VIEW_SELECT_NEW_DEFAULT_MODAL
    description: "The user is prompted to select a new default portfolio."
    events:
      USER_SELECTS_NEW_DEFAULT: SubmittingNewDefault

  - name: SubmittingNewDefault
    renders: VIEW_SELECT_NEW_DEFAULT_MODAL
    description: "Submitting the user's choice for the new default portfolio."
    entryAction:
      service: "PUT /api/users/me/settings (setting new defaultPortfolioId)"
      transitions:
        success: SuccessRefresh
        failure: APIError

  - name: SuccessRefresh
    description: "The operation was successful. The view will now be refreshed."
    exitAction:
      action: REFRESH_VIEW
      target: VIEW_DASHBOARD

  - name: APIError
    renders: VIEW_CONFIRM_DELETE_PORTFOLIO_MODAL # Or VIEW_SELECT_NEW_DEFAULT_MODAL
    description: "A generic error message is shown that the operation could not be completed."
    events:
      USER_DISMISSES_ERROR: Idle
---
flowId: FLOW_IMPORT_TRANSACTIONS
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The user is in a view where they can initiate a transaction import."
    events:
      USER_CLICKS_IMPORT: SelectingFile

  - name: SelectingFile
    description: "The user is prompted by the system to select a transaction file."
    events:
      USER_SELECTS_FILE: ValidatingFile
      USER_CANCELS: Idle

  - name: ValidatingFile
    renders: VIEW_PORTFOLIO_DETAIL
    description: "Performing client-side validation on the selected file."
    entryAction:
      service: "FileValidationService.validate(file)"
      transitions:
        valid: Uploading
        invalid: FileError

  - name: Uploading
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The file is being uploaded and processed by the backend."
    entryAction:
      service: "POST /api/users/me/portfolios/{portfolioId}/transactions/import"
      transitions:
        success: ReviewingChanges
        parsing_failed: ParsingError
        failure: APIError

  - name: ReviewingChanges
    renders: VIEW_IMPORT_REVIEW  # TODO: Note: This is a new view we need to define.
    description: "The user is shown the parsed and annotated list of transactions for review."
    events:
      USER_CLICKS_CONFIRM: SubmittingConfirmation
      USER_CLICKS_CANCEL: Idle

  - name: SubmittingConfirmation
    renders: VIEW_IMPORT_REVIEW # TODO: Note: This is a new view we need to define.
    description: "Submitting the user-reviewed and confirmed transaction data."
    entryAction:
      service: "POST /api/users/me/portfolios/{portfolioId}/transactions/import/confirm"
      transitions:
        success: Success
        validation_failed: ReviewingChanges
        failure: APIError

  - name: Success
    description: "The import was successful and the portfolio has been updated."
    exitAction:
      action: REFRESH_VIEW
      target: VIEW_PORTFOLIO_DETAIL

  - name: FileError
    renders: VIEW_PORTFOLIO_DETAIL
    description: "An error message is shown indicating the selected file is invalid."
    events:
      USER_DISMISSES_ERROR: Idle

  - name: ParsingError
    renders: VIEW_PORTFOLIO_DETAIL
    description: "An error message is shown indicating the file could not be parsed."
    events:
      USER_DISMISSES_ERROR: Idle

  - name: APIError
    renders: VIEW_PORTFOLIO_DETAIL
    description: "A generic error message is shown that the operation could not be completed."
    events:
      USER_DISMISSES_ERROR: Idle
---
flowId: FLOW_ADD_HOLDING_MANUAL
requiresAuth: true
initialState: HoldingListView
states:
  - name: HoldingListView
    renders: VIEW_PORTFOLIO_DETAIL
    description: "The user is viewing the list of holdings in their portfolio."
    events:
      USER_CLICKS_ADD_HOLDING: LookupInput

  - name: LookupInput
    renders: VIEW_INSTRUMENT_LOOKUP_MODAL
    description: "The user is prompted to enter an identifier for the new holding."
    events:
      USER_SUBMITS_IDENTIFIER: SubmittingLookup
      USER_CLICKS_CANCEL: HoldingListView

  - name: SubmittingLookup
    renders: VIEW_INSTRUMENT_LOOKUP_MODAL
    description: "The system is searching for the financial instrument."
    entryAction:
      service: "FinancialInstrumentLookupService.search(identifier)"
      transitions:
        success: ConfirmingHoldingCreation
        failure: LookupError

  - name: ConfirmingHoldingCreation
    renders: VIEW_INSTRUMENT_LOOKUP_MODAL
    description: "The user is shown the details of the found instrument to confirm."
    events:
      USER_CONFIRMS_CREATION: SubmittingHolding
      USER_CLICKS_CANCEL: HoldingListView

  - name: SubmittingHolding
    renders: VIEW_INSTRUMENT_LOOKUP_MODAL
    description: "The system is creating the new, empty holding."
    entryAction:
      service: "POST /api/users/me/holdings"
      transitions:
        success: AddingLots
        failure: APIError

  - name: AddingLots
    renders: VIEW_HOLDING_DETAIL
    description: "The user is viewing the new holding and can optionally add lots."
    events:
      USER_CLICKS_ADD_LOT: AddingSingleLot
      USER_CLICKS_FINISH: HoldingListView

  - name: AddingSingleLot
    description: "Invoking the lot creation subflow."
    subflow:
      flowId: FLOW_CREATE_LOT_MANUAL
      onCompletion: AddingLots
      onCancel: AddingLots

  - name: LookupError
    renders: VIEW_INSTRUMENT_LOOKUP_MODAL
    description: "An error is shown that the instrument could not be found."
    events:
      USER_DISMISSES_ERROR: LookupInput

  - name: APIError
    renders: VIEW_INSTRUMENT_LOOKUP_MODAL
    description: "A generic error is shown that the holding could not be saved."
    events:
      USER_DISMISSES_ERROR: LookupInput
---
flowId: FLOW_VIEW_HOLDINGS_LIST
requiresAuth: true
initialState: ReadOnlyMode
states:
  - name: ReadOnlyMode
    renders: VIEW_HOLDINGS_LIST
    description: "The user is viewing a read-only list of holdings."
    events:
      USER_CLICKS_MANAGE: ManageMode
      USER_CLICKS_HOLDING_BODY: HoldingDetailView

  - name: ManageMode
    renders: VIEW_HOLDINGS_LIST
    description: "The user has entered manage mode for the holdings list."
    events:
      USER_CLICKS_DONE: ReadOnlyMode
      USER_CLICKS_HOLDING_BODY: HoldingDetailView
      USER_CLICKS_ADD_HOLDING: AddingHolding
      USER_CLICKS_EDIT_HOLDING_ITEM: EditingHolding
      USER_CLICKS_DELETE_HOLDING_ITEM: DeletingHolding
      USER_CLICKS_MOVE_HOLDING_ITEM: MovingHolding

  - name: HoldingDetailView
    description: "Navigating to the holding's detailed view."
    exitAction:
      action: NAVIGATE_TO
      target: VIEW_HOLDING_DETAIL

  - name: AddingHolding
    description: "Invoking the holding creation subflow."
    subflow:
      flowId: FLOW_ADD_HOLDING_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: EditingHolding
    description: "Invoking the holding update subflow."
    subflow:
      flowId: FLOW_UPDATE_HOLDING_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: DeletingHolding
    description: "Invoking the holding deletion subflow."
    subflow:
      flowId: FLOW_DELETE_HOLDING_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: MovingHolding
    description: "Invoking the holding move subflow."
    subflow:
      flowId: FLOW_MOVE_HOLDING_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode
---
flowId: FLOW_VIEW_HOLDING_DETAIL
requiresAuth: true
initialState: ReadOnly
states:
  - name: ReadOnly
    renders: VIEW_HOLDING_DETAIL
    description: "The user is viewing the holding's details in a read-only state."
    events:
      USER_CLICKS_EDIT: ManageMode
      USER_CLICKS_DELETE: DeletingHolding
      USER_CLICKS_MOVE: MovingHolding
      USER_CLICKS_BACK: (exit flow)

  - name: ManageMode
    renders: VIEW_HOLDING_DETAIL
    description: "The user is editing the holding and its lots."
    activates:
      - flowId: "FLOW_VIEW_LOTS_LIST"
        targetState: "ManageMode"
    events:
      USER_CLICKS_SAVE: SavingChanges
      USER_CLICKS_CANCEL: ReadOnly
      USER_CLICKS_ADD_LOT: AddingLot
      USER_CLICKS_EDIT_LOT_ITEM: EditingLot
      USER_CLICKS_DELETE_LOT_ITEM: DeletingLot

  - name: SavingChanges
    renders: VIEW_HOLDING_DETAIL
    description: "Submitting all changes to the holding's metadata."
    entryAction:
      service: "PUT /api/users/me/holdings/{holdingId}"
      transitions:
        success: ReadOnly
        failure: ManageMode

  - name: AddingLot
    renders: VIEW_HOLDING_DETAIL
    description: "Invoking the subflow to add a new lot."
    subflow:
      flowId: FLOW_CREATE_LOT_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: EditingLot
    renders: VIEW_HOLDING_DETAIL
    description: "Invoking the subflow to edit an existing lot."
    subflow:
      flowId: FLOW_UPDATE_LOT_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: DeletingLot
    renders: VIEW_HOLDING_DETAIL
    description: "Invoking the subflow to delete an existing lot."
    subflow:
      flowId: FLOW_DELETE_LOT_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: DeletingHolding
    renders: VIEW_HOLDING_DETAIL
    description: "Invoking the subflow to delete the entire holding."
    subflow:
      flowId: FLOW_DELETE_HOLDING_MANUAL
      onCompletion: (exit flow)
      onCancel: ReadOnly

  - name: MovingHolding
    renders: VIEW_HOLDING_DETAIL
    description: "Invoking the subflow to move the holding."
    subflow:
      flowId: FLOW_MOVE_HOLDING_MANUAL
      onCompletion: (exit flow)
      onCancel: ReadOnly
---
flowId: FLOW_UPDATE_HOLDING_MANUAL
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    description: "The flow is dormant, waiting to be triggered."
    events:
      USER_CLICKS_EDIT_HOLDING: Editing

  - name: Editing
    renders: VIEW_HOLDING_FORM
    description: "A modal appears with the holding's metadata, ready for editing."
    events:
      USER_CLICKS_SAVE: ValidateForm
      USER_CLICKS_CANCEL: Idle

  - name: ValidateForm
    renders: VIEW_HOLDING_FORM
    description: "Performing client-side validation on the updated inputs."
    entryAction:
      service: "ValidationService.validate(form)"
      transitions:
        valid: Submitting
        invalid: FormError

  - name: Submitting
    renders: VIEW_HOLDING_FORM
    description: "Submitting the updated holding data to the backend."
    entryAction:
      service: "PUT /api/users/me/holdings/{holdingId}"
      transitions:
        success: Success
        failure: APIError

  - name: Success
    description: "The holding was updated successfully."
    exitAction:
      action: CLOSE_MODAL_AND_REFRESH_VIEW
      target: VIEW_HOLDING_DETAIL

  - name: FormError
    renders: VIEW_HOLDING_FORM
    description: "An error is shown indicating which form fields are invalid."
    events:
      USER_DISMISSES_ERROR: Editing

  - name: APIError
    renders: VIEW_HOLDING_FORM
    description: "A generic error is shown that the holding could not be updated."
    events:
      USER_DISMISSES_ERROR: Editing
---
flowId: FLOW_DELETE_HOLDING_MANUAL
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    description: "The flow is dormant, waiting to be triggered."
    events:
      USER_CLICKS_DELETE_HOLDING: ConfirmingDelete

  - name: ConfirmingDelete
    renders: VIEW_CONFIRM_DELETE_HOLDING_MODAL
    description: "A confirmation dialog appears for the deletion."
    events:
      USER_CLICKS_CONFIRM_DELETE: Submitting
      USER_CLICKS_CANCEL_DELETE: Idle

  - name: Submitting
    renders: VIEW_CONFIRM_DELETE_HOLDING_MODAL
    description: "Submitting the delete request to the backend."
    entryAction:
      service: "DELETE /api/users/me/holdings/{holdingId}"
      transitions:
        success: Success
        failure: APIError

  - name: Success
    description: "The holding was successfully deleted."
    exitAction:
      action: REFRESH_VIEW
      target: VIEW_PORTFOLIO_DETAIL

  - name: APIError
    renders: VIEW_CONFIRM_DELETE_HOLDING_MODAL
    description: "A generic error is shown that the holding could not be deleted."
    events:
      USER_DISMISSES_ERROR: Idle
---
flowId: FLOW_MOVE_HOLDING_MANUAL
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    description: "The flow is dormant, waiting to be triggered."
    events:
      USER_CLICKS_MOVE_HOLDING: SelectingDestination

  - name: SelectingDestination
    renders: VIEW_MOVE_HOLDING_MODAL
    description: "A modal appears, prompting the user to select a destination portfolio."
    events:
      USER_SELECTS_DESTINATION: ConfirmingMove
      USER_CLICKS_CANCEL: Idle

  - name: ConfirmingMove
    renders: VIEW_MOVE_HOLDING_MODAL
    description: "The user is shown a confirmation message for the move."
    events:
      USER_CLICKS_CONFIRM_MOVE: Submitting
      USER_CLICKS_BACK: SelectingDestination

  - name: Submitting
    renders: VIEW_MOVE_HOLDING_MODAL
    description: "Submitting the move request to the backend."
    entryAction:
      service: "POST /api/users/me/holdings/{holdingId}/move"
      transitions:
        success: Success
        failure: APIError

  - name: Success
    description: "The holding was successfully moved."
    exitAction:
      action: NAVIGATE_TO
      target: VIEW_PORTFOLIO_DETAIL # of the destination portfolio

  - name: APIError
    renders: VIEW_MOVE_HOLDING_MODAL
    description: "A generic error is shown that the holding could not be moved."
    events:
      USER_DISMISSES_ERROR: Idle
---
flowId: FLOW_CREATE_LOT_MANUAL
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    description: "The flow is dormant, waiting to be triggered."
    events:
      USER_CLICKS_ADD_LOT: FormInput

  - name: FormInput
    renders: VIEW_LOT_FORM # This state renders the unified lot form.
    description: "The user is presented with a form to enter the new lot's details."
    events:
      USER_CLICKS_SAVE: ValidateForm
      USER_CLICKS_CANCEL: Idle

  - name: ValidateForm
    renders: VIEW_LOT_FORM # The form remains visible during validation.
    description: "The system is performing client-side validation on the form inputs."
    entryAction:
      service: "ValidationService.validate(formState)"
      transitions:
        valid: Submitting
        invalid: FormError

  - name: Submitting
    renders: VIEW_LOT_FORM # The form remains visible, likely showing a loading indicator.
    description: "The system is submitting the new lot data to the backend API."
    entryAction:
      service: "POST /api/users/me/holdings/{holdingId}/lots"
      transitions:
        success: Success
        failure: APIError

  - name: Success
    description: "The lot was created successfully. The flow will now terminate."
    exitAction:
      action: CLOSE_MODAL_AND_REFRESH_VIEW
      target: VIEW_HOLDING_DETAIL

  - name: FormError
    renders: VIEW_LOT_FORM # The form remains visible, now showing validation errors.
    description: "The user is shown an error message indicating which form fields are invalid."
    events:
      USER_DISMISSES_ERROR: FormInput

  - name: APIError
    renders: VIEW_LOT_FORM # The form remains visible, now showing a generic API error.
    description: "The user is shown a generic error message that the lot could not be saved."
    events:
      USER_DISMISSES_ERROR: FormInput
---
flowId: FLOW_VIEW_LOTS_LIST
requiresAuth: true
initialState: ReadOnly
states:
  - name: ReadOnly
    renders: VIEW_LOTS_LIST # This flow controls the state of the lot list component.
    description: "The user is viewing the holding's details, which includes a read-only list of its lots."
    events:
      USER_CLICKS_EDIT_HOLDING: ManageMode

  - name: ManageMode
    renders: VIEW_LOTS_LIST # The list component is now in its 'ManageMode'.
    description: "The user is in the holding's manage mode, enabling actions on the lot list."
    events:
      USER_CLICKS_SAVE_HOLDING: ReadOnly
      USER_CLICKS_CANCEL_HOLDING: ReadOnly
      USER_CLICKS_ADD_LOT: AddingLot
      USER_CLICKS_EDIT_LOT_ITEM: EditingLot
      USER_CLICKS_DELETE_LOT_ITEM: DeletingLot

  - name: AddingLot
    description: "The user has clicked 'Add Lot' and is now in the lot creation subflow."
    subflow:
      flowId: FLOW_CREATE_LOT_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: EditingLot
    description: "The user has clicked the 'Edit' button on a lot item and is now in the lot update subflow."
    subflow:
      flowId: FLOW_UPDATE_LOT_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode

  - name: DeletingLot
    description: "The user has clicked the 'Delete' button on a lot item and is now in the lot deletion subflow."
    subflow:
      flowId: FLOW_DELETE_LOT_MANUAL
      onCompletion: ManageMode
      onCancel: ManageMode
---
flowId: FLOW_UPDATE_LOT_MANUAL
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    description: "The flow is dormant, waiting to be triggered."
    events:
      USER_CLICKS_EDIT_LOT: Editing

  - name: Editing
    renders: VIEW_LOT_FORM # This state renders the unified lot form, pre-filled with data.
    description: "A modal appears, pre-filled with the selected lot's details, ready for editing."
    events:
      USER_CLICKS_SAVE: ValidateForm
      USER_CLICKS_CANCEL: Idle

  - name: ValidateForm
    renders: VIEW_LOT_FORM
    description: "The system is performing client-side validation on the updated form inputs."
    entryAction:
      service: "ValidationService.validate(form)"
      transitions:
        valid: Submitting
        invalid: FormError

  - name: Submitting
    renders: VIEW_LOT_FORM
    description: "The system is submitting the updated lot data to the backend."
    entryAction:
      service: "PUT /api/users/me/holdings/{holdingId}/lots/{lotId}"
      transitions:
        success: Success
        failure: APIError

  - name: Success
    description: "The lot was updated successfully."
    exitAction:
      action: CLOSE_MODAL_AND_REFRESH_VIEW
      target: VIEW_HOLDING_DETAIL

  - name: FormError
    renders: VIEW_LOT_FORM
    description: "The user is shown an error message indicating which form fields are invalid."
    events:
      USER_DISMISSES_ERROR: Editing

  - name: APIError
    renders: VIEW_LOT_FORM
    description: "The user is shown a generic error message that the lot could not be updated."
    events:
      USER_DISMISSES_ERROR: Editing
---
flowId: FLOW_DELETE_LOT_MANUAL
requiresAuth: true
initialState: Idle
states:
  - name: Idle
    description: "The flow is dormant, waiting to be triggered."
    events:
      USER_CLICKS_DELETE_LOT: ConfirmingDelete

  - name: ConfirmingDelete
    renders: VIEW_CONFIRM_DELETE_LOT_MODAL # This state renders the confirmation modal.
    description: "A confirmation dialog appears, asking the user to confirm the deletion."
    events:
      USER_CLICKS_CONFIRM_DELETE: Submitting
      USER_CLICKS_CANCEL_DELETE: Idle

  - name: Submitting
    renders: VIEW_CONFIRM_DELETE_LOT_MODAL # The modal remains visible, showing a loading state.
    description: "The system is submitting the delete request to the backend."
    entryAction:
      service: "DELETE /api/users/me/holdings/{holdingId}/lots/{lotId}"
      transitions:
        success: Success
        failure: APIError

  - name: Success
    description: "The lot was successfully deleted."
    exitAction:
      action: REFRESH_VIEW
      target: VIEW_HOLDING_DETAIL

  - name: APIError
    renders: VIEW_CONFIRM_DELETE_LOT_MODAL # The modal remains visible, now showing an error.
    description: "The user is shown a generic error message that the lot could not be deleted."
    events:
      USER_DISMISSES_ERROR: Idle
---
