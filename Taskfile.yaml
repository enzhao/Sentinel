version: '3'

# Define a variable for the utility environment's Python executable
vars:
  UTIL_PYTHON: venv_util/bin/python

tasks:
  # Generates the source Mermaid diagrams from the ui_flows_spec.yaml file
  spec:generate-flow-diagrams:
    desc: Generates the source Mermaid diagrams from the ui_flows_spec.yaml file.
    cmds:
      - echo "Generating Mermaid diagrams from flow specs..."
      - "{{.UTIL_PYTHON}} util/generate_ui_flow_visuals_mermaid.py docs/specs/ui_flows_spec.yaml"
      - echo "Source diagrams generated in docs/ui_flow_diagrams.md."
    silent: false

  # Updates the product_spec.md with the latest generated Mermaid diagrams
  spec:sync-flow-diagrams-to-spec:
    desc: Updates the product_spec.md with the latest generated Mermaid diagrams.
    cmds:
      - echo "Synchronizing diagrams into product_spec.md..."
      - "{{.UTIL_PYTHON}} util/update_flow_diagrams_in_product_spec.py docs/ui_flow_diagrams.md product_spec.md"
      - echo "Product spec diagrams are up to date."
    silent: false
  
  spec:update-flow-diagrams-in-product_spec:
    desc: "Generates and updates all flow diagrams in the product spec."
    cmds:
      - task: spec:generate-flow-diagrams
      - task: spec:sync-flow-diagrams-to-spec
    silent: false

  generate-messages:
    desc: "Parses product_spec.md to generate message files for frontend and backend."
    cmds:
      - echo "🐍 Generating message files from product_spec.md..."
      - venv/bin/python util/generate_messages.py
      - echo "✅ Message files generated."
    silent: false

  backend:compile-deps:
    desc: "Generates requirements.txt from .in files using pip-compile."
    dir: backend
    cmds:
      - echo "🐍 Compiling production dependencies..."
      - pip-compile requirements.in
      - echo "🐍 Compiling development dependencies..."
      # Use the generated requirements.txt as a constraint to ensure compatibility
      - pip-compile --constraint requirements.txt requirements-dev.in
      - echo "✅ Dependency files generated."
    silent: false

  backend:install-deps:
    desc: "Installs backend Python dependencies using pip-tools."
    dir: backend
    cmds:
      - echo "🐍 Installing/syncing Python dependencies..."
      - pip-sync requirements.txt requirements-dev.txt
      - echo "✅ Dependencies are up to date."
    silent: false

  backend:sync-deps:
    desc: "Compiles and installs/syncs backend dependencies in one step."
    cmds:
      - task: backend:compile-deps
      - task: backend:install-deps
    silent: false

  backend:test:
    desc: "Runs backend unit and integration tests with pytest."
    dir: backend
    cmds:
      - echo "🧪 Running backend tests with coverage..."
      - venv/bin/pytest --cov=src
    silent: false

  backend:build-docker:
    desc: "Builds the production Docker image for the backend."
    cmds:
      - echo "🐳 Building Docker image..."
      - docker build -t sentinel-backend ./backend
      - echo "✅ Docker image 'sentinel-backend' built."
    silent: false

  backend:start-docker:
    desc: "Runs the backend Docker container."
    cmds:
      - echo "🚀 Running backend container..."
      - >
        docker run --rm -p 8000:8000 
        -e ENV=dev 
        -v $(pwd)/backend/serviceAccountKey.json:/app/serviceAccountKey.json 
        -v $(pwd)/backend/.env:/app/.env 
        sentinel-backend
    silent: false

  backend:run-docker:
    desc: "Runs the full local backend workflow: test, build, and run."
    cmds:
      - task: backend:test
      - task: backend:build-docker
      - task: backend:start-docker
    silent: false
  
  backend:run-local-dev:
    desc: "Runs the backend development server (uvicorn) with hot-reloading."
    dir: backend
    cmds:
      - echo "🚀 Starting backend dev server on http://127.0.0.1:8000"
      - ENV=dev ../venv/bin/uvicorn src.main:app --reload
    silent: false

  user-docs:build:
    desc: "Builds the user docs."
    cmds:
      - echo "📚 Building user documentation..."
      - source venv_util/bin/activate
      - mkdocs build --config-file mkdocs.yml --site-dir frontend/public/user_docs
      - echo "✅ User documentation built."
    silent: false 
  
  frontend:build:
    desc: "Builds the user docs and the production-ready frontend application."
    cmds:
      - task: user-docs:build
      - echo "🟢 Building frontend application..."
      - npm --prefix frontend run build
      - echo "✅ Frontend build complete. Output is in frontend/dist/"
    silent: false

  frontend:test-local:
    desc: "Runs the frontend unit and integration tests."
    cmds:
      - echo "🧪 Running frontend tests..."
      - npm --prefix frontend run test:spec
    silent: false
  
  frontend:run-local:
    desc: "Runs the frontend development server locally."
    cmds:
      - echo "🟢 Starting frontend dev server..."
      - npm --prefix frontend run dev
    silent: false

  user:provision-dev:
    desc: "Provisions a new user (asdf@asdf.com) in the Firebase emulator for manual testing."
    cmds:
      - echo "👤 Provisioning user asdf@asdf.com..."
      - venv/bin/python util/create_user.py --email asdf@asdf.com --password asdfasdf --username asdf --env dev
      - echo "✅ User provisioned successfully."
    silent: false
