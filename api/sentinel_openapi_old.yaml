openapi: 3.1.1
info:
  title: Sentinel API
  description: API for the Sentinel personal investment strategy automation tool.
  version: 0.1.0
servers:
  - url: https://api.sentinel.com
    description: Production server
  - url: http://localhost:8000
    description: Local development server
security:
  - firebaseAuth: []
components:
  securitySchemes:
    firebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Firebase ID Token
  schemas:
    ISODateTime:
      type: string
      format: date-time
      description: ISO 8601 formatted date-time string.
    UUID:
      type: string
      format: uuid
      description: Unique Universal Identifier (UUID) version 4.
    IdempotencyKey:
      type: string
      format: uuid
      description: Client-generated UUID v4 to ensure idempotent behavior for state-changing requests.
    Currency:
      type: string
      enum: [EUR, USD, GBP]
      default: EUR
      description: Supported currencies.
    SecurityType:
      type: string
      enum: [STOCK, ETF, FUND]
      description: Type of financial security.
    AssetClass:
      type: string
      enum: [EQUITY, CRYPTO, COMMODITY]
      description: Asset class of the security.
    RuleType:
      type: string
      enum: [BUY, SELL]
      description: Type of investment rule.
    LogicalOperator:
      type: string
      enum: [AND, OR]
      default: AND
      description: Logical operator for combining rule conditions.
    RuleStatus:
      type: string
      enum: [ENABLED, PAUSED]
      description: Status of a rule.
    ParentType:
      type: string
      enum: [PORTFOLIO, HOLDING]
      description: Type of parent entity for a RuleSet.
    NotificationStatus:
      type: string
      enum: [PENDING, SENT, FAILED]
      description: Status of a notification.
    SubscriptionStatus:
      type: string
      enum: [FREE, PREMIUM]
      default: FREE
      description: User's subscription status.

    # --- Data Models ---

    # User Model (Ref: Section 8.2. Data Models)
    User:
      type: object
      required:
        - uid
        - username
        - email
        - defaultPortfolioId
        - subscriptionStatus
        - notificationPreferences
        - createdAt
        - modifiedAt
      properties:
        uid:
          $ref: '#/components/schemas/UUID'
          description: Firebase Auth UID.
        username:
          type: string
          description: User-defined username for display purposes.
        email:
          type: string
          format: email
          description: User's email address.
        defaultPortfolioId:
          $ref: '#/components/schemas/UUID'
          description: The portfolioId of the user's default portfolio.
        subscriptionStatus:
          $ref: '#/components/schemas/SubscriptionStatus'
        notificationPreferences:
          type: object
          description: User's notification preferences.
          properties:
            email:
              type: boolean
            push:
              type: boolean
          example:
            email: true
            push: false
        createdAt:
          $ref: '#/components/schemas/ISODateTime'
        modifiedAt:
          $ref: '#/components/schemas/ISODateTime'

    # Portfolio Models (Ref: Section 3.2. Portfolio and Cash Data Model)
    CashReserve:
      type: object
      required:
        - totalAmount
        - warChestAmount
      properties:
        totalAmount:
          type: number
          format: float
          description: Total cash in the portfolio.
        warChestAmount:
          type: number
          format: float
          description: Portion of cash reserved for opportunistic buying.
    Portfolio:
      type: object
      required:
        - portfolioId
        - userId
        - name
        - defaultCurrency
        - cashReserve
        - createdAt
        - modifiedAt
      properties:
        portfolioId:
          $ref: '#/components/schemas/UUID'
          description: Unique UUID, the document ID.
        userId:
          $ref: '#/components/schemas/UUID'
          description: Firebase Auth UID, links the portfolio to its owner.
        name:
          type: string
          description: User-defined name for the portfolio.
        description:
          type: string
          nullable: true
          description: Optional, user-defined description for the portfolio.
        defaultCurrency:
          $ref: '#/components/schemas/Currency'
        cashReserve:
          $ref: '#/components/schemas/CashReserve'
        ruleSetId:
          $ref: '#/components/schemas/UUID'
          nullable: true
          description: Optional, UUID linking to a RuleSet document.
        createdAt:
          $ref: '#/components/schemas/ISODateTime'
        modifiedAt:
          $ref: '#/components/schemas/ISODateTime'
    DailyPortfolioSnapshot:
      type: object
      required:
        - date
        - totalCost
        - currentValue
        - preTaxGainLoss
        - afterTaxGainLoss
        - gainLossPercentage
      properties:
        date:
          $ref: '#/components/schemas/ISODateTime'
        totalCost:
          type: number
          format: float
        currentValue:
          type: number
          format: float
        preTaxGainLoss:
          type: number
          format: float
        afterTaxGainLoss:
          type: number
          format: float
        gainLossPercentage:
          type: number
          format: float
        sma7:
          type: number
          format: float
          nullable: true
        sma20:
          type: number
          format: float
          nullable: true
        sma50:
          type: number
          format: float
          nullable: true
        sma200:
          type: number
          format: float
          nullable: true

    # Lot Models (Ref: Section 5.2. Lot Data Model)
    ComputedInfoLot:
      type: object
      properties:
        currentPrice:
          type: number
          format: float
        currentValue:
          type: number
          format: float
        preTaxProfit:
          type: number
          format: float
        capitalGainTax:
          type: number
          format: float
        afterTaxProfit:
          type: number
          format: float
    Lot:
      type: object
      required:
        - lotId
        - purchaseDate
        - quantity
        - purchasePrice
        - createdAt
        - modifiedAt
      properties:
        lotId:
          $ref: '#/components/schemas/UUID'
        purchaseDate:
          $ref: '#/components/schemas/ISODateTime'
        quantity:
          type: number
          format: float
          minimum: 0
        purchasePrice:
          type: number
          format: float
          minimum: 0
        createdAt:
          $ref: '#/components/schemas/ISODateTime'
        modifiedAt:
          $ref: '#/components/schemas/ISODateTime'
        computedInfo:
          $ref: '#/components/schemas/ComputedInfoLot'
          description: On-the-fly computed information for the lot.

    # Holding Models (Ref: Section 4.2. Holding Data Model)
    Holding:
      type: object
      required:
        - holdingId
        - portfolioId
        - userId
        - ticker
        - securityType
        - assetClass
        - currency
        - createdAt
        - modifiedAt
        - lots
      properties:
        holdingId:
          $ref: '#/components/schemas/UUID'
        portfolioId:
          $ref: '#/components/schemas/UUID'
        userId:
          $ref: '#/components/schemas/UUID'
        ticker:
          type: string
        ISIN:
          type: string
          nullable: true
        WKN:
          type: string
          nullable: true
        securityType:
          $ref: '#/components/schemas/SecurityType'
        assetClass:
          $ref: '#/components/schemas/AssetClass'
        currency:
          $ref: '#/components/schemas/Currency'
        annualCosts:
          type: number
          format: float
          nullable: true
          minimum: 0
        createdAt:
          $ref: '#/components/schemas/ISODateTime'
        modifiedAt:
          $ref: '#/components/schemas/ISODateTime'
        lots:
          type: array
          items:
            $ref: '#/components/schemas/Lot'
        ruleSetId:
          $ref: '#/components/schemas/UUID'
          nullable: true
          description: Optional, UUID linking to a RuleSet document.
    DailyHoldingSnapshot:
      type: object
      required:
        - date
        - totalCost
        - currentValue
        - preTaxGainLoss
        - afterTaxGainLoss
        - gainLossPercentage
      properties:
        date:
          $ref: '#/components/schemas/ISODateTime'
        totalCost:
          type: number
          format: float
        currentValue:
          type: number
          format: float
        preTaxGainLoss:
          type: number
          format: float
        afterTaxGainLoss:
          type: number
          format: float
        gainLossPercentage:
          type: number
          format: float
        sma7:
          type: number
          format: float
          nullable: true
        sma20:
          type: number
          format: float
          nullable: true
        sma50:
          type: number
          format: float
          nullable: true
        sma200:
          type: number
          format: float
          nullable: true
        vwma7:
          type: number
          format: float
          nullable: true
        vwma20:
          type: number
          format: float
          nullable: true
        vwma50:
          type: number
          format: float
          nullable: true
        vwma200:
          type: number
          format: float
          nullable: true
        rsi14:
          type: number
          format: float
          nullable: true
        macd:
          type: object
          nullable: true
          properties:
            value:
              type: number
              format: float
            signal:
              type: number
              format: float
            histogram:
              type: number
              format: float

    # RuleSet Models (Ref: Section 6.2. Rule Set Data Model)
    ConditionType:
      type: string
      enum: [DRAWDOWN_FROM_HIGH, RSI_LEVEL, PRICE_VS_SMA, PRICE_VS_VWMA, MACD_CROSSOVER, VIX_LEVEL, PROFIT_TARGET, STOP_LOSS, TRAILING_STOP_LOSS]
      description: Type of rule condition.
    Condition:
      type: object
      required:
        - conditionId
        - type
        - parameters
      properties:
        conditionId:
          $ref: '#/components/schemas/UUID'
        type:
          $ref: '#/components/schemas/ConditionType'
        parameters:
          type: object
          description: Parameters for the condition, varies by type.
          example:
            period: 200
            operator: cross_below
    Rule:
      type: object
      required:
        - ruleId
        - ruleType
        - logicalOperator
        - conditions
        - status
      properties:
        ruleId:
          $ref: '#/components/schemas/UUID'
        ruleType:
          $ref: '#/components/schemas/RuleType'
        logicalOperator:
          $ref: '#/components/schemas/LogicalOperator'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        status:
          $ref: '#/components/schemas/RuleStatus'
    RuleSet:
      type: object
      required:
        - ruleSetId
        - userId
        - parentId
        - parentType
        - rules
        - createdAt
        - modifiedAt
      properties:
        ruleSetId:
          $ref: '#/components/schemas/UUID'
        userId:
          $ref: '#/components/schemas/UUID'
        parentId:
          $ref: '#/components/schemas/UUID'
        parentType:
          $ref: '#/components/schemas/ParentType'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        createdAt:
          $ref: '#/components/schemas/ISODateTime'
        modifiedAt:
          $ref: '#/components/schemas/ISODateTime'

    # MarketData Model (Ref: Section 7.2. Data Models)
    MarketData:
      type: object
      required:
        - date
        - ticker
        - open
        - high
        - low
        - close
        - volume
      properties:
        date:
          $ref: '#/components/schemas/ISODateTime'
        ticker:
          type: string
        open:
          type: number
          format: float
        high:
          type: number
          format: float
        low:
          type: number
          format: float
        close:
          type: number
          format: float
        volume:
          type: integer
        sma200:
          type: number
          format: float
          nullable: true
        sma50:
          type: number
          format: float
          nullable: true
        sma20:
          type: number
          format: float
          nullable: true
        sma7:
          type: number
          format: float
          nullable: true
        vwma200:
          type: number
          format: float
          nullable: true
        vwma50:
          type: number
          format: float
          nullable: true
        vwma20:
          type: number
          format: float
          nullable: true
        vwma7:
          type: number
          format: float
          nullable: true
        rsi14:
          type: number
          format: float
          nullable: true
        macd:
          type: object
          nullable: true
          properties:
            value:
              type: number
              format: float
            signal:
              type: number
              format: float
            histogram:
              type: number
              format: float

    # Alert Models (Ref: Section 7.2. Data Models)
    MarketDataSnapshot:
      type: object
      description: A snapshot of key market data points at the time of the alert trigger.
      properties:
        closePrice:
          type: number
          format: float
        rsi14:
          type: number
          format: float
        sma200:
          type: number
          format: float
      example:
        closePrice: 150.25
        rsi14: 28.5
        sma200: 165.10
    TriggeredCondition:
      type: object
      description: Details of a condition that was met.
      properties:
        type:
          $ref: '#/components/schemas/ConditionType'
        parameters:
          type: object
          description: Parameters of the triggered condition.
        actualValue:
          type: number
          format: float
      example:
        type: RSI_LEVEL
        parameters:
          threshold: 30
        actualValue: 28.5
    TaxInfo:
      type: object
      description: Tax information for SELL alerts.
      properties:
        preTaxProfit:
          type: number
          format: float
        capitalGainTax:
          type: number
          format: float
        afterTaxProfit:
          type: number
          format: float
        appliedTaxRate:
          type: number
          format: float
      example:
        preTaxProfit: 1200.50
        capitalGainTax: 316.50
        afterTaxProfit: 884.00
        appliedTaxRate: 26.375
    Alert:
      type: object
      required:
        - alertId
        - userId
        - holdingId
        - ruleSetId
        - ruleId
        - triggeredAt
        - isRead
        - marketDataSnapshot
        - triggeredConditions
        - notificationStatus
      properties:
        alertId:
          $ref: '#/components/schemas/UUID'
        userId:
          $ref: '#/components/schemas/UUID'
        holdingId:
          $ref: '#/components/schemas/UUID'
        ruleSetId:
          $ref: '#/components/schemas/UUID'
        ruleId:
          $ref: '#/components/schemas/UUID'
        triggeredAt:
          $ref: '#/components/schemas/ISODateTime'
        isRead:
          type: boolean
          default: false
        marketDataSnapshot:
          $ref: '#/components/schemas/MarketDataSnapshot'
        triggeredConditions:
          type: array
          items:
            $ref: '#/components/schemas/TriggeredCondition'
        taxInfo:
          $ref: '#/components/schemas/TaxInfo'
          nullable: true
        notificationStatus:
          $ref: '#/components/schemas/NotificationStatus'

    

    # --- Request/Response Bodies ---

    # Portfolio Requests (Ref: Section 3.3. Portfolio and Cash Rules)
    CreatePortfolioRequest:
      type: object
      required:
        - name
        - defaultCurrency
        - cashReserve
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 1000
        defaultCurrency:
          $ref: '#/components/schemas/Currency'
        cashReserve:
          $ref: '#/components/schemas/CashReserve'
    UpdatePortfolioRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 1000
        defaultCurrency:
          $ref: '#/components/schemas/Currency'
        cashReserve:
          $ref: '#/components/schemas/CashReserve'
    SetDefaultPortfolioRequest:
      type: object
      required:
        - defaultPortfolioId
      properties:
        defaultPortfolioId:
          $ref: '#/components/schemas/UUID'
    PortfolioListResponse:
      type: array
      items:
        type: object
        properties:
          portfolioId:
            $ref: '#/components/schemas/UUID'
          name:
            type: string
          currentValue:
            type: number
            format: float
          defaultCurrency:
            $ref: '#/components/schemas/Currency'

    # Holding Requests (Ref: Section 4.3. Holding Management Rules)
    InstrumentLookupRequest:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string
          description: Ticker, ISIN, or WKN of the financial instrument.
    InstrumentLookupResponse:
      type: array
      items:
        type: object
        properties:
          ticker:
            type: string
          ISIN:
            type: string
            nullable: true
          WKN:
            type: string
            nullable: true
          securityType:
            $ref: '#/components/schemas/SecurityType'
          assetClass:
            $ref: '#/components/schemas/AssetClass'
          currency:
            $ref: '#/components/schemas/Currency'
    CreateHoldingRequest:
      type: object
      required:
        - portfolioId
        - ticker
        - securityType
        - assetClass
        - currency
      properties:
        portfolioId:
          $ref: '#/components/schemas/UUID'
        ticker:
          type: string
        ISIN:
          type: string
          nullable: true
        WKN:
          type: string
          nullable: true
        securityType:
          $ref: '#/components/schemas/SecurityType'
        assetClass:
          $ref: '#/components/schemas/AssetClass'
        currency:
          $ref: '#/components/schemas/Currency'
        annualCosts:
          type: number
          format: float
          nullable: true
          minimum: 0
    UpdateHoldingRequest:
      type: object
      properties:
        annualCosts:
          type: number
          format: float
          nullable: true
          minimum: 0
    MoveHoldingRequest:
      type: object
      required:
        - destinationPortfolioId
      properties:
        destinationPortfolioId:
          $ref: '#/components/schemas/UUID'
    HoldingListResponse:
      type: array
      items:
        type: object
        properties:
          holdingId:
            $ref: '#/components/schemas/UUID'
          ticker:
            type: string
          currentValue:
            type: number
            format: float
          gainLossPercentage:
            type: number
            format: float
          currency:
            $ref: '#/components/schemas/Currency'

    # Lot Requests (Ref: Section 5.3. Lot Management Rules)
    CreateLotRequest:
      type: object
      required:
        - purchaseDate
        - quantity
        - purchasePrice
      properties:
        purchaseDate:
          $ref: '#/components/schemas/ISODateTime'
        quantity:
          type: number
          format: float
          minimum: 0
        purchasePrice:
          type: number
          format: float
          minimum: 0
    UpdateLotRequest:
      type: object
      properties:
        purchaseDate:
          $ref: '#/components/schemas/ISODateTime'
        quantity:
          type: number
          format: float
          minimum: 0
        purchasePrice:
          type: number
          format: float
          minimum: 0

    # RuleSet Requests (Ref: Section 6.3. Rule Set Management Rules)
    CreateRuleSetRequest:
      type: object
      required:
        - parentId
        - parentType
        - rules
      properties:
        parentId:
          $ref: '#/components/schemas/UUID'
        parentType:
          $ref: '#/components/schemas/ParentType'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
    UpdateRuleSetRequest:
      type: object
      required:
        - rules
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
    EffectiveRuleSetResponse:
      type: object
      properties:
        ruleSet:
          $ref: '#/components/schemas/RuleSet'
          nullable: true
        source:
          type: string
          enum: [specific, inherited, none]
          description: Indicates if rules are specific to holding, inherited from portfolio, or none.

    # Alert Requests (Ref: Section 7.4. Frontend-Related Business Rules)
    MarkAlertsAsReadRequest:
      type: array
      items:
        type: object
        required:
          - alertId
          - isRead
        properties:
          alertId:
            $ref: '#/components/schemas/UUID'
          isRead:
            type: boolean

    # Transaction Import Requests (Ref: Section 3.3.5. P_5000: Unified Transaction Import)
    UploadTransactionsFileRequest:
      type: string
      format: binary
      description: CSV or text file containing transaction data.
    AnnotatedTransaction:
      type: object
      required:
        - action
        - data
      properties:
        action:
          type: string
          enum: [CREATE, UPDATE]
          description: Action to perform for the transaction (CREATE new holding, UPDATE existing).
        data:
          type: object
          description: Transaction data, structure depends on action (e.g., Lot data for UPDATE, Holding + Lot data for CREATE).
          example:
            ticker: AAPL
            purchaseDate: "2023-01-15T10:00:00Z"
            quantity: 10
            purchasePrice: 150.00
    ReviewTransactionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/AnnotatedTransaction'
    ConfirmTransactionsRequest:
      type: array
      items:
        $ref: '#/components/schemas/AnnotatedTransaction'

    # --- Error Responses ---
    ErrorResponse:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: string
          description: A specific error code for programmatic handling.
      example:
        message: "Portfolio name is invalid."
        code: "P_E_1102"

paths:
  /api/users/me/portfolios:
    # Ref: Section 3.3.1. P_1000: Portfolio Creation
    post:
      summary: Create a new portfolio
      operationId: createPortfolio
      tags:
        - Portfolio Management
      security:
        - firebaseAuth: []
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortfolioRequest'
      responses:
        '201':
          description: Portfolio created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
        '400':
          description: Invalid request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict, e.g., portfolio name not unique.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 3.3.2.2. P_2200: Portfolio List Retrieval
    get:
      summary: Retrieve a list of all portfolios for the authenticated user
      operationId: listPortfolios
      tags:
        - Portfolio Management
      security:
        - firebaseAuth: []
      responses:
        '200':
          description: List of portfolios retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/portfolios/{portfolioId}:
    # Ref: Section 3.3.2.1. P_2000: Single Portfolio Retrieval
    get:
      summary: Retrieve a single, detailed portfolio
      operationId: getPortfolio
      tags:
        - Portfolio Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: portfolioId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the portfolio to retrieve.
      responses:
        '200':
          description: Full, enriched portfolio data returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 3.3.3.1. P_3000: Portfolio Update (Manual)
    put:
      summary: Update a specific portfolio's settings
      operationId: updatePortfolio
      tags:
        - Portfolio Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: portfolioId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the portfolio to update.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortfolioRequest'
      responses:
        '200':
          description: Portfolio updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
        '400':
          description: Invalid request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 3.3.4.1. P_4000: Portfolio Deletion (Entire Portfolio)
    delete:
      summary: Delete an entire portfolio
      operationId: deletePortfolio
      tags:
        - Portfolio Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: portfolioId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the portfolio to delete.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      responses:
        '204':
          description: Portfolio and its holdings successfully deleted.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/settings:
    # Ref: Section 3.3.3.2. P_3400: Set Default Portfolio
    put:
      summary: Set the user's default portfolio
      operationId: setDefaultPortfolio
      tags:
        - User Management
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDefaultPortfolioRequest'
      responses:
        '200':
          description: Default portfolio updated successfully.
        '400':
          description: Invalid request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/portfolios/{portfolioId}/transactions/import:
    # Ref: Section 3.3.5. P_5000: Unified Transaction Import
    post:
      summary: Upload a file for unified transaction import
      operationId: uploadTransactionsFile
      tags:
        - Transaction Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: portfolioId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the portfolio to import transactions into.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV or text file containing transaction data.
      responses:
        '200':
          description: File processed successfully, returns annotated transactions for review.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewTransactionsResponse'
        '400':
          description: Invalid file type or size, or parsing failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/portfolios/{portfolioId}/transactions/import/confirm:
    # Ref: Section 3.3.5. P_5000: Unified Transaction Import
    post:
      summary: Confirm and apply imported transactions
      operationId: confirmTransactionsImport
      tags:
        - Transaction Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: portfolioId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the portfolio to apply transactions to.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmTransactionsRequest'
      responses:
        '200':
          description: Transactions imported successfully.
        '400':
          description: Invalid data in the confirmed transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/holdings/lookup:
    # Ref: Section 4.3.1.1. H_1000: Financial Instrument Lookup
    post:
      summary: Look up a financial instrument by identifier
      operationId: lookupInstrument
      tags:
        - Holding Management
      security:
        - firebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstrumentLookupRequest'
      responses:
        '200':
          description: Instrument(s) found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentLookupResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Instrument not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/holdings:
    # Ref: Section 4.3.1.2. H_1200: Holding Creation
    post:
      summary: Create a new holding
      operationId: createHolding
      tags:
        - Holding Management
      security:
        - firebaseAuth: []
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHoldingRequest'
      responses:
        '201':
          description: Holding created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holding'
        '400':
          description: Invalid request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/portfolios/{portfolioId}/holdings:
    # Ref: Section 4.3.3.1. H_2000: Holding List Retrieval (Portfolio Details View)
    get:
      summary: Retrieve a list of holdings for a specific portfolio
      operationId: listHoldings
      tags:
        - Holding Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: portfolioId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the portfolio to retrieve holdings from.
      responses:
        '200':
          description: List of enriched holdings for the portfolio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HoldingListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/holdings/{holdingId}:
    # Ref: Section 4.3.3.2. H_2200: Single Holding Retrieval (Holding Details View)
    get:
      summary: Retrieve a single, fully enriched holding with all its lots
      operationId: getHolding
      tags:
        - Holding Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the holding to retrieve.
      responses:
        '200':
          description: Full, enriched holding data returned, including all lots.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holding'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 4.3.4.1. H_3000: Manual Holding Update
    put:
      summary: Update a specific holding's metadata
      operationId: updateHolding
      tags:
        - Holding Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the holding to update.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHoldingRequest'
      responses:
        '200':
          description: Holding metadata updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holding'
        '400':
          description: Invalid request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 4.3.5. H_4000: Holding Deletion
    delete:
      summary: Delete an entire holding
      operationId: deleteHolding
      tags:
        - Holding Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the holding to delete.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      responses:
        '200':
          description: Holding successfully deleted.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/holdings/{holdingId}/move:
    # Ref: Section 4.3.7. H_6000: Move Holding
    post:
      summary: Move a holding to another portfolio
      operationId: moveHolding
      tags:
        - Holding Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the holding to move.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveHoldingRequest'
      responses:
        '200':
          description: Holding successfully moved.
        '400':
          description: Invalid move request (e.g., already in destination portfolio).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding or destination portfolio not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/holdings/{holdingId}/lots:
    # Ref: Section 5.3.1.1. L_1000: Manual Creation
    post:
      summary: Add a new purchase lot to an existing holding
      operationId: createLot
      tags:
        - Lot Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the holding to add the lot to.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLotRequest'
      responses:
        '201':
          description: Lot added successfully to the holding.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holding' # Returns the updated holding with the new lot
        '400':
          description: Invalid lot data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/holdings/{holdingId}/lots/{lotId}:
    # Ref: Section 5.3.3. L_3000: Manual Lot Update
    put:
      summary: Update a specific purchase lot within a holding
      operationId: updateLot
      tags:
        - Lot Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the parent holding.
        - in: path
          name: lotId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the lot to update.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLotRequest'
      responses:
        '200':
          description: Lot updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holding' # Returns the updated holding
        '400':
          description: Invalid lot data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding or Lot not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 5.3.4. L_4000: Lot Deletion
    delete:
      summary: Delete a specific purchase lot from a holding
      operationId: deleteLot
      tags:
        - Lot Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the parent holding.
        - in: path
          name: lotId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the lot to delete.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      responses:
        '200':
          description: Lot successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Holding' # Returns the updated holding
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding or Lot not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/rulesets:
    # Ref: Section 6.3.1. R_1000: Rule Set Creation
    post:
      summary: Create a new RuleSet
      operationId: createRuleSet
      tags:
        - Rule Management
      security:
        - firebaseAuth: []
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleSetRequest'
      responses:
        '201':
          description: RuleSet created and linked successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
        '400':
          description: Invalid request data (e.g., invalid conditions).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (user not authorized for parent).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Parent (Portfolio/Holding) not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/rulesets/{ruleSetId}:
    # Ref: Section 6.3.3. R_3000: Rule Set Update
    put:
      summary: Update an existing RuleSet
      operationId: updateRuleSet
      tags:
        - Rule Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: ruleSetId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the RuleSet to update.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRuleSetRequest'
      responses:
        '200':
          description: RuleSet updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
        '400':
          description: Invalid request data (e.g., invalid conditions).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (user not owner of RuleSet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: RuleSet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 6.3.4. R_4000: Rule Set Deletion
    delete:
      summary: Delete a RuleSet and unlink it from its parent
      operationId: deleteRuleSet
      tags:
        - Rule Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: ruleSetId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the RuleSet to delete.
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      responses:
        '204':
          description: RuleSet deleted and unlinked successfully.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (user not owner of RuleSet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: RuleSet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/holdings/{holdingId}/effective-rules:
    # Ref: Section 6.3.2. R_2000: Effective Rule Set Retrieval
    get:
      summary: Retrieve the effective RuleSet for a given holding
      operationId: getEffectiveRuleSet
      tags:
        - Rule Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: holdingId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the holding to retrieve effective rules for.
      responses:
        '200':
          description: Effective RuleSet returned (specific, inherited, or none).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EffectiveRuleSetResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Holding not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/alerts:
    # Ref: Section 7.4.1. A_1000: Alert List Retrieval
    get:
      summary: Retrieve a list of all historical alerts for the authenticated user
      operationId: listAlerts
      tags:
        - Alert Management
      security:
        - firebaseAuth: []
      responses:
        '200':
          description: List of alerts retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    # Ref: Section 7.4.3. A_3000: Mark Alerts as Read
    patch:
      summary: Mark one or more alerts as read
      operationId: markAlertsAsRead
      tags:
        - Alert Management
      security:
        - firebaseAuth: []
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/IdempotencyKey'
          required: true
          description: Client-generated UUID v4 for idempotency.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkAlertsAsReadRequest'
      responses:
        '200':
          description: Alerts successfully marked as read.
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (user not authorized for one or more alerts).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me/alerts/{alertId}:
    # Ref: Section 7.4.2. A_2000: Single Alert Retrieval
    get:
      summary: Retrieve the full details of a single, specific alert
      operationId: getAlert
      tags:
        - Alert Management
      security:
        - firebaseAuth: []
      parameters:
        - in: path
          name: alertId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: The ID of the alert to retrieve.
      responses:
        '200':
          description: Full, detailed alert data returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Alert not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


