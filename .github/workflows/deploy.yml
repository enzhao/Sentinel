name: Build, Test, and Deploy Sentinel to GCP

on:
  push:
    branches: ["main"]
  workflow_dispatch: # Allows manual runs

# Prevent multiple concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: 🧪 Run All Tests
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🛠️ Install backend dependencies
        working-directory: backend
        run: |
          python -m venv venv && . venv/bin/activate
          pip install pip-tools
          pip-compile requirements.in -o requirements.txt
          pip-compile --constraint requirements.txt requirements-dev.in -o requirements-dev.txt
          pip-sync requirements.txt requirements-dev.txt

      - name: 🛠️ Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: 🔬 Run backend and frontend tests with Firebase Emulator
        env:
          # Provide dummy Firebase config for SDK initialization in tests.
          # The SDK needs these to exist, even if they are not real keys,
          # because the app will connect to the emulators anyway.
          VITE_FIREBASE_API_KEY: "test-api-key"
          VITE_FIREBASE_AUTH_DOMAIN: "localhost"
          VITE_FIREBASE_PROJECT_ID: "sentinel-invest"
          VITE_FIREBASE_STORAGE_BUCKET: "test.appspot.com"
          VITE_FIREBASE_MESSAGING_SENDER_ID: "1234567890"
          VITE_FIREBASE_APP_ID: "1:1234567890:web:1234567890abcdef"
          VITE_USE_EMULATORS: 'true'
          VITE_FIREBASE_AUTH_EMULATOR_HOST: "localhost:9099"
          VITE_FIRESTORE_EMULATOR_HOST: "localhost:8080"
        run: |
          npm install -g firebase-tools
          firebase emulators:exec --project=sentinel-invest " \
            (cd backend && . venv/bin/activate && ENV=test pytest --cov=src) && \
            (cd frontend && npm run test:spec) \
          "

  build-and-push-backend:
    name: 🏗️ Build & Push Backend
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.docker_push.outputs.image_tag }}
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: ☁️ Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Docker for GAR
        run: gcloud auth configure-docker europe-west3-docker.pkg.dev

      - name: 🏗️ Build & Push Docker image with :latest tag
        id: docker_push
        run: |
          IMAGE_NAME="europe-west3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sentinel/backend:latest"
          docker build -t "$IMAGE_NAME" ./backend
          docker push "$IMAGE_NAME"
          # Set the output for the next job
          echo "image_tag=$IMAGE_NAME" >> $GITHUB_OUTPUT

  deploy-backend:
    name: 🚀 Deploy Backend to Cloud Run
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    outputs:
      backend_url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 🔐 Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 🚢 Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: 'sentinel-backend'
          region: 'europe-west3'
          image: 'europe-west3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sentinel/backend:latest'
          flags: '--allow-unauthenticated --port=8000'
          env_vars: |
            APP_ENV=production
            GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            ALPHA_VANTAGE_API_KEY=${{ secrets.ALPHA_VANTAGE_API_KEY }}

  build-frontend:
    name: 🏗️ Build Frontend
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🐍 Set up Python for MkDocs
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 🛠️ Install MkDocs and dependencies
        # Install dependencies from the locked requirements file for utilities
        # to ensure the build environment matches the intended setup.
        run: pip install -r util/requirements.txt

      - name: 📚 Build User Documentation into public folder
        run: mkdocs build --config-file mkdocs.yml --site-dir frontend/public/user_docs

      - name: 🧾 Create .env.production for build
        run: |
          {
            echo "VITE_API_URL=\"${{ needs.deploy-backend.outputs.backend_url }}\""
            echo "VITE_USE_EMULATORS=false"
            echo "VITE_FIREBASE_API_KEY=\"${{ secrets.VITE_FIREBASE_API_KEY }}\""
            echo "VITE_FIREBASE_AUTH_DOMAIN=\"${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}\""
            echo "VITE_FIREBASE_PROJECT_ID=\"${{ secrets.GCP_PROJECT_ID }}\""
            echo "VITE_FIREBASE_STORAGE_BUCKET=\"${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}\""
            echo "VITE_FIREBASE_MESSAGING_SENDER_ID=\"${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}\""
            echo "VITE_FIREBASE_APP_ID=\"${{ secrets.VITE_FIREBASE_APP_ID }}\""
          } > frontend/.env.production

      - name: 🛠️ Install and Build Frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build 

      - name: 📦 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          
  deploy-frontend:
    name: 🌐 Deploy Frontend to Firebase
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 📦 Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.GCP_SA_KEY }}'
          channelId: live
          projectId: '${{ secrets.GCP_PROJECT_ID }}'

  create-release:
    name: 🏷️ Create GitHub Release
    if: github.event_name == 'workflow_dispatch' # Only run on manual trigger
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 🔄 Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get latest tag
        id: tag
        run: |
          echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: 📦 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.latest_tag }}
          release_name: Release ${{ steps.tag.outputs.latest_tag }}
          body: |
            See [CHANGELOG.md](https://github.com/enzhao/Sentinel/blob/${{ steps.tag.outputs.latest_tag }}/CHANGELOG.md) for details.
          draft: false
          prerelease: false
